Optical Flow: https://opencv-python-tutroals.readthedocs.io/en/latest/py_tutorials/py_video/py_lucas_kanade/py_lucas_kanade.html

Shi-Tomasi: https://opencv-python-tutroals.readthedocs.io/en/latest/py_tutorials/py_feature2d/py_shi_tomasi/py_shi_tomasi.html

Lucas-Kanade Method: https://en.wikipedia.org/wiki/Lucas%E2%80%93Kanade_method

Meanshift and Camshift: https://bit.ly/2zTy9xu


Gunner Farneback's Algorithm.
calcOpticalFlowfarneback(prev, next, flow, pyr_scale, levels, winsize, iterations, poly_n, poly_sigma, flags) -> flow

1. prev first 8-bit single-channel input image
2. next second input image of the same size and the same type as prev.
3. flow computed flow image that has the same size as orev and type CV_32FC2.
4. pyr_scale parameter, specifying the image scale (<1) to build pyramids for each image
    4a. pyr_scale = 0.5 means a classical pyramid, where each next layer is twice smaller than the previous one.
5. levels number of pyramid layers including the initial image; levels-1 means that no extra layers are created and only the origianl images are used.
6. winsize averaging window size.
    6a. larger values increase the algorithm robustness to image
7. noise and give more chances for fast motion detection, but yield more blurred motion pictures.
8. ierations number of iterations the algorithm does at each pyramid level.
9. poly_n size of the pixel neighborhood used to find polynomial expansion in each pixel.
    9a. larger values mean that the image will be approximated with smoother surfaces.
10. yielding more robust algorithm and more blurred motion field, typically poly_n -5 or 7.
11. poly_sigma standard deviation of the gaussian that is used to smooth derivatives used as a basis for the polynomial expansion; for poly_n-5, you can set poly_sigma=1.1, for poly_n-7, a good value would be poly_sigma=1.5.


Cascade Classifier: https://docs.opencv.org/3.4/db/d28/tutorial_cascade_classifier.html

HSV Colorspace:https://docs.opencv.org/3.4/da/d97/tutorial_threshold_inRange.html
